const delay = ms => new Promise(resolve => setTimeout(resolve, ms));

async function generateHash() {
    var input = Math.random().toString();
    const encoder = new TextEncoder();
    const data = encoder.encode(input);
    const hashBuffer = await crypto.subtle.digest('SHA-256', data);
    const hashArray = Array.from(new Uint8Array(hashBuffer)); // convert buffer to byte array
    const hashHex = hashArray.map(b => b.toString(16).padStart(2, '0')).join(''); // convert bytes to hex string
    return hashHex.toUpperCase().substring(0,32);
}

function shuffleArray(array) {
    // Creating a copy of the array to avoid modifying the original array
    let shuffledArray = array.slice();

    for (let i = shuffledArray.length - 1; i > 0; i--) {
        // Generating a random index from 0 to i
        let j = Math.floor(Math.random() * (i + 1));

        // Swapping elements at indices i and j
        [shuffledArray[i], shuffledArray[j]] = [shuffledArray[j], shuffledArray[i]];
    }

    return shuffledArray;
}

async function search(N) {
    // Check if N is an integer
    if (!Number.isInteger(N) || N <= 0) {
        console.error("Error: Argument N must be a positive integer.");
        return;
    }

    try {
        // Fetch top story IDs from Hacker News API
        let response = await fetch('https://hacker-news.firebaseio.com/v0/topstories.json');
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }

        let storyIdsNative = await response.json();
        let storyIds_ = await storyIdsNative.slice();
        let storyIds = await shuffleArray(storyIds_);

        // Get details of top N stories and open Bing search in new tabs
        for (let i = 0; i < N && i < storyIds.length; i++) {
            let storyResponse = await fetch(`https://hacker-news.firebaseio.com/v0/item/${storyIds[i]}.json`);
            if (!storyResponse.ok) {
                throw new Error(`Story fetch error! status: ${storyResponse.status}`);
            }

            let story = await storyResponse.json();

            // Open a new tab with Bing search for each story title
            var querystr = "";
            if (story && story.title) {
                var querystrprev = "";
                querystr = encodeURIComponent(story.title.replace(' ', '+'));
                // var hashstr = await generateHash();
		var hashstr = "66c4ec8728484d70b6ded3a039752f49";
		var url = `https://www.bing.com/search?q=${querystr}&qs=n&form=QBRE&sp=-1&lq=0&pq=${querystrprev}&sc=0-48&sk=&cvid=${hashstr}&ghsh=0&ghacc=0&ghpl=`;
                var newTab = window.open(
		    "https://www.msn.com/en-us/feed?ocid=msedgntp&cvid=66c4ec8728484d70b6ded3a039752f49&ei=9", '_blank'
                );
		await(delay(4000));
		newTab.location = url;
		var delayMs = 8432 + (Math.random() * 5000);
		console.log("waiting for " + delayMs);
                await delay(delayMs);
		console.log(url);
                newTab.close();
            }

            await delay(3321 + (Math.random() * 2000));
        }
    } catch (error) {
        console.error("Failed to fetch top stories:", error);
    }
}

// This line is just to expose the function to the window scope when loading the script in console
window.search = search;
